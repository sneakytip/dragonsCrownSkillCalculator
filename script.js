class SkillType{constructor(b,a,c){this.name=b;this.label=a;this.categoryGroup=c}}class SkillCategory{constructor(b,a,c){this.name=b;this.label=a;this.skillGroup=c}}class Skill{constructor(b,a,c,e,d){this.name=b;this.label=a;this.description=c;this.tierGroup=e;this.moreInfo=d;this.levelMax=e.length}}class SkillTier{constructor(b,a,c,e,d,g){this.level=b;this.effect=a;this.cost=c;this.minLevelPlayer=e;this.minLevelCategory=d;this.moreInfo=g}}
const skillsCommon=new SkillType("common","Common Skills",[new SkillCategory("common","Common",[new Skill("slide","Slide Attack","Increased chance of taking enemy down when sliding ("+String.fromCharCode(8615)+" + "+String.fromCharCode(9632)+").",[new SkillTier(1,"Power: 30"+String.fromCharCode(8193)+"Knockdown +30%",1,-1,-1,["Slight increase to max movement distance."]),new SkillTier(2,"Power: 34"+String.fromCharCode(8193)+"Knockdown +40%",1,10,-1,["Slight increase to max movement distance."]),new SkillTier(3,
"Power: 40"+String.fromCharCode(8193)+"Knockdown +55%",2,20,3,["Moderate increase to max movement distance."]),new SkillTier(4,"Power: 46"+String.fromCharCode(8193)+"Knockdown +70%",3,31,3,["Great increase to max movement distance."]),new SkillTier(5,"Power: 60"+String.fromCharCode(8193)+"Knockdown +100%",4,40,6,["Massive increase to max movement distance."])],["The max distance of the slide attack increases as the level of the skill increases.","The max time of execution does not change with changes to the skill level, thus you will cover further max distances in the same amount of time you would cover the default max distance."]),
new Skill("wealthHealth","Wealth to Health","Picking up coins recovers HP.",[new SkillTier(1,"HP recovered per coin: 2",1,-1,-1,[""]),new SkillTier(2,"HP recovered per coin: 3",1,5,-1,[""]),new SkillTier(3,"HP recovered per coin: 5",2,14,3,[""]),new SkillTier(4,"HP recovered per coin: 7",3,27,3,[""]),new SkillTier(5,"HP recovered per coin: 10",4,42,6,[""])],[""]),new Skill("moneyPower","Money is Power","Picking up coins adds to your score.",[new SkillTier(1,"Score obtained +10",1,-1,-1,[""]),new SkillTier(2,
"Score obtained +20",1,8,-1,[""]),new SkillTier(3,"Score obtained +40",2,17,3,[""]),new SkillTier(4,"Score obtained +60",3,29,3,[""]),new SkillTier(5,"Score obtained +100",4,43,6,[""])],[""]),new Skill("vitalityBoost","Vitality Boost","Increases your max HP.",[new SkillTier(1,"Max HP +20",1,-1,-1,[""]),new SkillTier(2,"Max HP +35",1,7,-1,[""]),new SkillTier(3,"Max HP +50",1,13,3,[""]),new SkillTier(4,"Max HP +65",2,19,3,[""]),new SkillTier(5,"Max HP +80",2,25,6,[""]),new SkillTier(6,"Max HP +100",
3,31,6,[""]),new SkillTier(7,"Max HP 120",3,38,9,[""]),new SkillTier(8,"Max HP +145",4,45,9,[""]),new SkillTier(9,"Max HP +170",4,52,12,[""]),new SkillTier(10,"Max HP +200",6,59,12,[""])],[""]),new Skill("nutritionist","Nutritionist","Increases the healing effectiveness of food.",[new SkillTier(1,"Recovery Amount +20%",1,-1,-1,[""]),new SkillTier(2,"Recovery Amount +25%",1,11,-1,[""]),new SkillTier(3,"Recovery Amount +30%",2,24,3,[""]),new SkillTier(4,"Recovery Amount +35%",3,37,3,[""]),new SkillTier(5,
"Recovery Amount +50%",4,51,6,[""])],[""]),new Skill("maintenance","Maintenance","Grants a chance that using a temporary weapon won't decrease the number of uses.",[new SkillTier(1,"Chance that # of uses won't deplete: 20%",1,6,0,[""]),new SkillTier(2,"Chance that # of uses won't deplete: 25%",1,13,0,[""]),new SkillTier(3,"Chance that # of uses won't deplete: 30%",2,23,3,[""]),new SkillTier(4,"Chance that # of uses won't deplete: 35%",3,34,3,[""]),new SkillTier(5,"Chance that # of uses won't deplete: 50%",
4,47,6,[""])],[""]),new Skill("adroitHands","Adroit Hands","Reduces cooldown time in between using items.",[new SkillTier(1,"Item use cooldown -10%",1,9,0,[""]),new SkillTier(2,"Item use cooldown -15%",1,16,0,[""]),new SkillTier(3,"Item use cooldown -20%",2,22,3,[""]),new SkillTier(4,"Item use cooldown -25%",2,29,3,[""]),new SkillTier(5,"Item use cooldown -30%",3,36,6,[""]),new SkillTier(6,"Item use cooldown -35%",3,44,6,[""]),new SkillTier(7,"Item use cooldown -50%",5,53,9,[""])],[""]),new Skill("evasion",
"Evasion","Increases the number of times you can evade ( R1 ) in a row.",[new SkillTier(1,"Number of evasions +1",2,12,0,[""]),new SkillTier(2,"Number of evasions +2",3,32,3,[""]),new SkillTier(3,"Number of evasions +3",4,52,6,[""])],[""]),new Skill("deepPockets","Deep Pockets","Increases the number of item slots in Bags.",[new SkillTier(1,"Number of Bag slots: 8",2,15,0,[""]),new SkillTier(2,"Number of Bag slots: 9",4,30,3,[""]),new SkillTier(3,"Number of Bag slots: 10",6,50,6,[""])],[""])])]),skillsFighter=
new SkillType("fighter","Fighter Skills",[new SkillCategory("attack","Attack",[new Skill("cycloneMasher","Cyclone Masher","Increases duration of aerial attacks. Rapidly press "+String.fromCharCode(9632)+" to activate.",[new SkillTier(1,"Power: 20"+String.fromCharCode(8193)+"Descent speed -30%",1,-1,-1,[""]),new SkillTier(2,"Power: 22"+String.fromCharCode(8193)+"Descent speed -45"+String.fromCharCode(8193)+"Attack range: 105%",1,10,-1,[""]),new SkillTier(3,"Power: 23"+String.fromCharCode(8193)+"Descent speed -60"+
String.fromCharCode(8193)+"Attack range: 110%",2,19,3,[""]),new SkillTier(4,"Power: 25"+String.fromCharCode(8193)+"Descent speed -75"+String.fromCharCode(8193)+"Attack range: 115%",3,30,3,[""]),new SkillTier(5,"Power: 30"+String.fromCharCode(8193)+"Descent speed -95"+String.fromCharCode(8193)+"Attack range: 125%",5,45,6,[""])],[""]),new Skill("shockwave","Shockwave","Send out ripples that creep along the ground. Activate with "+String.fromCharCode(8613)+" + "+String.fromCharCode(9632)+".",[new SkillTier(1,
"Power: 15"+String.fromCharCode(8193)+"Number of shockwaves: 2",1,-1,-1,[""]),new SkillTier(2,"Power: 18"+String.fromCharCode(8193)+"Number of shockwaves: 2",1,8,-1,[""]),new SkillTier(3,"Power: 23"+String.fromCharCode(8193)+"Number of shockwaves: 3",2,16,3,[""]),new SkillTier(4,"Power: 30"+String.fromCharCode(8193)+"Number of shockwaves: 3",3,26,3,[""]),new SkillTier(5,"Power: 45"+String.fromCharCode(8193)+"Number of shockwaves: 4",5,40,6,["Vertical reach of shockwaves greatly increased."])],[""])]),
new SkillCategory("defense","Defense",[new Skill("coverAll","Cover Allies","Hold "+String.fromCharCode(9632)+" on the ground to use your shield to protect allies and temporarily increase your attack power upon successful block.",[new SkillTier(1,"Max ATK Damage Increase: +40%",1,-1,-1,[""]),new SkillTier(2,"Effect range: 125%"+String.fromCharCode(8193)+"Max ATK Damage Increase: +70%",2,17,-1,[""]),new SkillTier(3,"Effect range: 200%"+String.fromCharCode(8193)+"Max ATK Damage Increase: +100%",3,36,
3,[""])],[""]),new Skill("reflexGuard","Reflex Guard","Grants chance to automatically guard when attacked",[new SkillTier(1,"Chance of auto-defense: 25%",1,-1,-1,[""]),new SkillTier(2,"Chance of auto-defense: 30%",1,7,-1,[""]),new SkillTier(3,"Chance of auto-defense: 35%",2,16,3,[""]),new SkillTier(4,"Chance of auto-defense: 40%",2,27,3,[""]),new SkillTier(5,"Chance of auto-defense: 50%",3,35,6,[""])],[""])])]),skillsList=[skillsCommon,skillsFighter];
function getSkillType(b){let a={};skillsList.forEach(c=>{c.name===b&&(a=c)});return a}function getSkillTier(b,a,c,e){let d={};skillsList.forEach(g=>{g.name===b&&g.categoryGroup.forEach(k=>{k.name===a&&k.skillGroup.forEach(h=>{h.name===c&&h.tierGroup.forEach(l=>{l.level===e&&(d=l)})})})});return d};const characterClassNames="Fighter Amazon Dwarf Elf Sorceress Wizard".split(" "),maxSkillPoints=155,skillIdSuffx="-name-desc",skillEffectIdSuffx="-effects",skillConditionsIdSuffx="-conditions",skillElemIdSuffixCost="-cost",skillElemIdSuffixPlayer="-player",skillElemIdSuffixCategory="-category",skillEffectsCurrentIdSuffix="-current",skillEffectsNextIdSuffix="-next",tableCommonBodyId="common-skills-table-body",skillRowDataId="data-row-id",skillDataCellId="data-cell-id",skillDataElementId="data-elem-id",
skillDataIdType="data-skill-type",skillDataIdCategory="data-skill-category",skillDataIdCategoryLabel="data-skill-category-label",skillDataIdSkill="data-skill-name",inputNonInteractive="table-input-non-interactable",inputSkillLevel="input-skill-level";let playerSelectionPrevious="",currentSkillPoints=maxSkillPoints,commonSkillTiers=[];
function processSkillTierPropertiesForOutput(b,a,c=null){switch(b){case "effect":return"Next: "+a;case "cost":return 0<a?"Skill point cost: "+a+" point(s)":"";case "player":return 0<a?"Player LV must be at least LV "+a+".":"";case "category":return 0<a&&c?"The "+c+" category skill must be LV "+a+".":"";default:return""}}
function enableResetButtons(){let b=document.getElementsByClassName("reset-button");for(let a=0;a<b.length;a++)b[a].setAttribute("disabled","false"),b[a].removeAttribute("disabled")}function updateTotalCurrentSkillPoints(b,a,c){let e=document.getElementById("current-total-points");0<c?e.setAttribute("value",Number(e.getAttribute("value"))-b):e.setAttribute("value",Number(e.getAttribute("value"))+a)}
function resetTotalCurrentSkillPoints(b=0){document.getElementById("current-total-points").setAttribute("value",maxSkillPoints-b)}function populateSkillEffects(b,a,c,e){b.innerText=c;a.innerText=e}function populateSkillConditions(b,a,c){let e=["cost","player","category"];for(let d=0;d<b.length;d++)b[d].innerText="category"===e[d]?processSkillTierPropertiesForOutput(e[d],a[d],c):processSkillTierPropertiesForOutput(e[d],a[d])}
function updateCategoryLevel(b,a){a=Number(b.getAttribute("value"))+a;b.setAttribute("value",a)}function rollbackInputValue(b,a){b.value=a;b.setAttribute("value",a)}function limitTrigger(b){b.forEach(a=>{a.classList.contains("limiter-triggered")||a.classList.add("limiter-triggered")})}function limitTriggerReset(b){b.forEach(a=>{a.classList.contains("limiter-triggered")&&a.classList.remove("limiter-triggered")})}
function getFewerChildrenFromParentChildren(b,a,c,e,d){let g=Array(3),k=[];for(const h of b.children)h.getAttribute(a)===c?g[0]=h:h.getAttribute(a)===e?g[1]=h:h.getAttribute(a)===d&&(g[2]=h);g.forEach(h=>{k.push(h)});return k}
function updateSkillLevel(b){var a=document.getElementById("current-total-points"),c=b.getAttribute(skillDataIdSkill),e=b.getAttribute(skillDataIdType),d=b.getAttribute(skillDataIdCategory);let g=Number(b.getAttribute("max")),k=document.getElementById(c),h=document.getElementById(d).getElementsByTagName("input")[0],l=Number(a.getAttribute("value")),q=Number(b.getAttribute("value")),n=Number(b.value),m=n+1,r=n-q,t={},f={};a=[a.parentElement,h.parentElement];0<n?t=getSkillTier(e,d,c,n):t.effect="";
m>g?(f.cost="",f.minLevelPlayer="",f.minLevelCategory="",f.effect="--"):f=getSkillTier(e,d,c,m);0<r&&l>=Number(t.cost)||0>r?0<r&&Number(h.getAttribute("value"))>=Number(t.minLevelCategory)||0>r?(d=getFewerChildrenFromParentChildren(k,skillDataCellId,c+skillEffectIdSuffx,c+skillConditionsIdSuffx),e=getFewerChildrenFromParentChildren(d[0],skillDataElementId,c+skillEffectsCurrentIdSuffix,c+skillEffectsNextIdSuffix),c=getFewerChildrenFromParentChildren(d[1],skillDataElementId,c+skillElemIdSuffixCost,
c+skillElemIdSuffixPlayer,c+skillElemIdSuffixCategory),d=[f.cost,f.minLevelPlayer,f.minLevelCategory],b.setAttribute("value",n),populateSkillConditions(c,d,b.getAttribute(skillDataIdCategoryLabel)),populateSkillEffects(e[0],e[1],t.effect,f.effect),updateCategoryLevel(h,r),updateTotalCurrentSkillPoints(Number(t.cost),Number(f.cost),r),limitTriggerReset(a)):(limitTrigger([a[1]]),b.value=q):(limitTrigger([a[0]]),b.value=q)}
function elementBuilderInnerElements(b,a){a.forEach(c=>{b.appendChild(c)});return b}
function populateSkillTable(b,a,c){let e=document.getElementById(a),d=document.createElement("tbody");c=document.getElementById(c);let g=document.createTextNode(b.label);c.appendChild(g);b.categoryGroup.forEach(k=>{let h=0,l=document.createElement("td"),q=document.createElement("p");document.createElement("form");let n=document.createElement("label"),m=document.createElement("input"),r=document.createTextNode(k.label+" Skill"),t=document.createTextNode("Current LV: ");k.skillGroup.forEach(f=>{document.createTextNode(f.label.toString());
document.createTextNode(f.description.toString());let u=document.createElement("tr"),x=document.createElement("td"),v=document.createElement("td"),y=document.createElement("td"),w=document.createElement("td"),z=document.createElement("p"),A=document.createElement("p"),B=document.createElement("p"),C=document.createElement("p"),D=document.createElement("p"),E=document.createElement("p"),F=document.createElement("p"),G=document.createElement("p"),H=document.createTextNode(f.label),I=document.createTextNode(f.description),
J=document.createTextNode(""),K=document.createTextNode("Next"),L=document.createTextNode(f.tierGroup[0].effect),M=document.createTextNode(processSkillTierPropertiesForOutput("cost",f.tierGroup[0].cost)),N=document.createTextNode(processSkillTierPropertiesForOutput("player",f.tierGroup[0].minLevelPlayer)),O=document.createTextNode(processSkillTierPropertiesForOutput("category",f.tierGroup[0].minLevelCategory,k.label)),p=document.createElement("input");w.setAttribute(skillDataCellId,f.name+skillConditionsIdSuffx);
C.setAttribute(skillDataElementId,f.name+skillElemIdSuffixCost);D.setAttribute(skillDataElementId,f.name+skillElemIdSuffixPlayer);E.setAttribute(skillDataElementId,f.name+skillElemIdSuffixCategory);w.classList.add("skills-table-wide-cell");C.appendChild(M);D.appendChild(N);E.appendChild(O);elementBuilderInnerElements(w,[C,D,E]);p.setAttribute("type","number");p.setAttribute("onKeyDown","return false");p.setAttribute("min","0");p.setAttribute("value","0");p.setAttribute("max",f.tierGroup.length.toString());
p.setAttribute(skillDataIdType,b.name);p.setAttribute(skillDataIdCategory,k.name);p.setAttribute(skillDataIdCategoryLabel,k.label);p.setAttribute(skillDataIdSkill,f.name);p.classList.add(inputSkillLevel);y.appendChild(p);y.addEventListener("input",function(P){updateSkillLevel(P.target)});v.setAttribute(skillDataCellId,f.name+skillEffectIdSuffx);A.setAttribute("class","skills-text-element-next-header");z.setAttribute(skillDataElementId,f.name+skillEffectsCurrentIdSuffix);B.setAttribute(skillDataElementId,
f.name+skillEffectsNextIdSuffix);v.classList.add("skills-table-widest-cell");A.appendChild(K);B.appendChild(L);z.appendChild(J);elementBuilderInnerElements(v,[z,A,B]);x.setAttribute(skillDataCellId,f.name+skillIdSuffx);F.appendChild(H);G.appendChild(I);elementBuilderInnerElements(x,[F,G]);u.setAttribute("id",f.name);1>h&&(l.setAttribute("id",k.name),m.setAttribute("type","number"),m.setAttribute("value","0"),m.setAttribute("min","0"),m.setAttribute("readonly",""),m.classList.add(inputNonInteractive),
n.appendChild(t),n.appendChild(m),q.appendChild(r),elementBuilderInnerElements(l,[q,n]),u.appendChild(l));elementBuilderInnerElements(u,[x,v,y,w]);h++;d.appendChild(u)});l.setAttribute("rowspan",h)});d.setAttribute("id",a);e.parentNode.replaceChild(d,e)}
function updateSkillsData(){const b=document.getElementById("tables-container");let a=document.getElementById("characters-list").value;if(a!==playerSelectionPrevious){let c=document.getElementById("common-skills-table"),e=document.getElementById("class-skills-table"),d=getSkillType(a);if(c.getAttribute("data-table-populated"))resetTableBody(["common-skills-table-body"]);else{let g=getSkillType("common");populateSkillTable(g,tableCommonBodyId,"common-skills-table-label");c.setAttribute("data-table-populated",
"");console.log(g)}playerSelectionPrevious=a;populateSkillTable(d,"class-skills-table-body","class-skills-table-label");e.setAttribute("data-table-populated","");"block"!==b.style.display&&(b.style.display="block");resetTotalCurrentSkillPoints();enableResetButtons()}}
function resetTableBody(b,a=[]){let c=document.getElementById("current-total-points");for(let q in b){var e=document.getElementById(b[q]),d=e.children;e=e.getElementsByClassName(inputNonInteractive);for(let n=0;n<d.length;n++){let m=d[n].getElementsByClassName(inputSkillLevel)[0];var g=d[n].getAttribute("id"),k=m.getAttribute(skillDataIdType),h=m.getAttribute(skillDataIdCategory),l=m.getAttribute(skillDataIdSkill);k=getSkillTier(k,h,l,1);l=getFewerChildrenFromParentChildren(d[n],skillDataCellId,g+
skillEffectIdSuffx,g+skillConditionsIdSuffx);h=getFewerChildrenFromParentChildren(l[0],skillDataElementId,g+skillEffectsCurrentIdSuffix,g+skillEffectsNextIdSuffix);g=getFewerChildrenFromParentChildren(l[1],skillDataElementId,g+skillElemIdSuffixCost,g+skillElemIdSuffixPlayer,g+skillElemIdSuffixCategory);l=[k.cost,k.minLevelPlayer,k.minLevelCategory];m.setAttribute("value",0);m.value=0;populateSkillConditions(g,l,m.getAttribute(skillDataIdCategoryLabel));populateSkillEffects(h[0],h[1],"",k.effect)}for(d=
0;d<e.length;d++)e[d].setAttribute("value",0),limitTriggerReset([e[d].parentElement])}0<a.length||resetTotalCurrentSkillPoints();limitTriggerReset([c.parentElement])}function prepCollapse(){let b=document.getElementsByClassName("collapsible");for(let a=0;a<b.length;a++)b[a].addEventListener("click",function(){this.classList.toggle("active");var c=this.nextElementSibling;c.style.maxHeight=c.style.maxHeight?null:c.scrollHeight+"px"})}
"loading"===document.readyState?document.addEventListener("DOMContentLoaded",prepCollapse):prepCollapse();
